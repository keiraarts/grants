{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport dbConnect from \"../../../utils/dbConnect\";\nimport Program from \"../../../models/programModel\";\nexport default function handler(_x, _x2) {\n  return _handler.apply(this, arguments);\n}\n\nfunction _handler() {\n  _handler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var method, programs;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            method = req.method;\n            _context.next = 3;\n            return dbConnect();\n\n          case 3:\n            _context.t0 = method;\n            _context.next = _context.t0 === \"GET\" ? 6 : 20;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.next = 9;\n            return Program.find({\n              active: true\n            }).select(\"organizers name url exhibiting tagline description total open close closeApplication\").populate(\"organizers\").sort(\"order\");\n\n          case 9:\n            programs = _context.sent;\n\n            if (programs) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", res.status(503).json({\n              success: false\n            }));\n\n          case 12:\n            res.status(200).json(programs);\n            _context.next = 19;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t1 = _context[\"catch\"](6);\n            console.error(_context.t1);\n            res.status(400).json({\n              success: false,\n              message: \"fetch failed\"\n            });\n\n          case 19:\n            return _context.abrupt(\"break\", 22);\n\n          case 20:\n            res.status(400).json({\n              success: false,\n              message: \"route not matched\"\n            });\n            return _context.abrupt(\"break\", 22);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 15]]);\n  }));\n  return _handler.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/kirilclimson/grants/pages/api/programs/getPrograms.js"],"names":["dbConnect","Program","handler","req","res","method","find","active","select","populate","sort","programs","status","json","success","console","error","message"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AAEA,wBAA8BC,OAA9B;AAAA;AAAA;;;sEAAe,iBAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,MADK,GACMF,GADN,CACLE,MADK;AAAA;AAAA,mBAEPL,SAAS,EAFF;;AAAA;AAAA,0BAILK,MAJK;AAAA,4CAKN,KALM;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAOgBJ,OAAO,CAACK,IAAR,CAAa;AAAEC,cAAAA,MAAM,EAAE;AAAV,aAAb,EACpBC,MADoB,yFAIpBC,QAJoB,CAIX,YAJW,EAKpBC,IALoB,CAKf,OALe,CAPhB;;AAAA;AAODC,YAAAA,QAPC;;AAAA,gBAcFA,QAdE;AAAA;AAAA;AAAA;;AAAA,6CAceP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAdf;;AAAA;AAgBPV,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,QAArB;AAhBO;AAAA;;AAAA;AAAA;AAAA;AAkBPI,YAAAA,OAAO,CAACC,KAAR;AACAZ,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,KAAX;AAAkBG,cAAAA,OAAO,EAAE;AAA3B,aAArB;;AAnBO;AAAA;;AAAA;AAyBTb,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,KAAX;AAAkBG,cAAAA,OAAO,EAAE;AAA3B,aAArB;AAzBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import dbConnect from \"../../../utils/dbConnect\";\nimport Program from \"../../../models/programModel\";\n\nexport default async function handler(req, res) {\n  const { method } = req;\n  await dbConnect();\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const programs = await Program.find({ active: true })\n          .select(\n            `organizers name url exhibiting tagline description total open close closeApplication`\n          )\n          .populate(\"organizers\")\n          .sort(\"order\");\n\n        if (!programs) return res.status(503).json({ success: false });\n\n        res.status(200).json(programs);\n      } catch (error) {\n        console.error(error);\n        res.status(400).json({ success: false, message: \"fetch failed\" });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({ success: false, message: \"route not matched\" });\n      break;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}